#include "jni.h"
#include <sys/stat.h>
#include <cstdio>
#include <cstdlib>
#include <fstream>
#include <sys/ptrace.h>
#include <unistd.h>
#include <dlfcn.h>
#include <android/log.h>

#include <sys/mman.h>
#include "include/inlineHook.h"


#define LOG_TAG "Native"
#define JNIREG_CLASS "com/mrctf/android2022/Utils"
#define LOGD(fmt,args...) __android_log_print(ANDROID_LOG_DEBUG, LOG_TAG,fmt, ##args)

jobject gcontext = nullptr;
JNIEnv *genv = nullptr;


const struct JNINativeInterface* NativeInterface;
jint (*old_RegisterNatives)(JNIEnv *env, jclass clazz, const JNINativeMethod* methods,jint nMethods) = NULL;
unsigned char *sign;

typedef unsigned char byte;
byte* methodAddr = nullptr;

unsigned char method[160] = {
        0x12, 0x17, 0x12, 0x01, 0x6E, 0x10, 0x27, 0x00, 0x08, 0x00, 0x0C, 0x02, 0x12, 0x01, 0x21, 0x24,
        0xD8, 0x04, 0x04, 0xFF, 0x35, 0x41, 0x10, 0x00, 0x48, 0x04, 0x02, 0x01, 0xD8, 0x05, 0x01, 0x01,
        0x48, 0x05, 0x02, 0x05, 0xB7, 0x54, 0xB7, 0x14, 0x8D, 0x44, 0x4F, 0x04, 0x02, 0x01, 0xD8, 0x01,
        0x01, 0x01, 0x28, 0xEE, 0x22, 0x00, 0x1F, 0x00, 0x70, 0x30, 0x31, 0x00, 0x70, 0x02, 0x12, 0x04,
        0x1F, 0x04, 0x20, 0x00, 0x22, 0x05, 0x1C, 0x00, 0x70, 0x10, 0x2C, 0x00, 0x05, 0x00, 0x1A, 0x06,
        0x00, 0x00, 0x6E, 0x20, 0x2E, 0x00, 0x65, 0x00, 0x0C, 0x05, 0x21, 0x26, 0xDA, 0x06, 0x06, 0x02,
        0x6E, 0x20, 0x2D, 0x00, 0x65, 0x00, 0x0C, 0x05, 0x1A, 0x06, 0x8D, 0x00, 0x6E, 0x20, 0x2E, 0x00,
        0x65, 0x00, 0x0C, 0x05, 0x6E, 0x10, 0x2F, 0x00, 0x05, 0x00, 0x0C, 0x05, 0x23, 0x76, 0x24, 0x00,
        0x12, 0x07, 0x4D, 0x00, 0x06, 0x07, 0x71, 0x30, 0x26, 0x00, 0x54, 0x06, 0x0C, 0x04, 0x6E, 0x10,
        0x2B, 0x00, 0x04, 0x00, 0x0C, 0x03, 0x71, 0x10, 0x12, 0x00, 0x03, 0x00, 0x0A, 0x04, 0x0F, 0x04
};

void __attribute((__annotate__(("nofla")))) __attribute((__annotate__(("nobcf")))) Encrypto(unsigned char *data,int length)
{
    int encryptCount = 0;

    int left;
    int right;
    int key = 0x20222022;
    int sum = 0;
    unsigned int i, j;

    encryptCount = length / 8;

    for (i = 0, j = 0; i < encryptCount; i++, j += 8) {
        sum = 0;

        left = data[j] << 24 | data[j + 1] << 16 | data[j + 2] << 8 | data[j + 3];
        right = data[j + 4] << 24 | data[j + 5] << 16 | data[j + 6] << 8 | data[j + 7];

        left = left ^ key;
        right = right ^ left;

        data[j] = (left >> 24) & 0xff;
        data[j + 1] = (left >> 16) & 0xff;
        data[j + 2] = (left >> 8) & 0xff;
        data[j + 3] = left & 0xff;
        data[j + 4] = (right >> 24) & 0xff;
        data[j + 5] = (right >> 16) & 0xff;
        data[j + 6] = (right >> 8) & 0xff;
        data[j + 7] = right & 0xff;
    }
}

jboolean JNICALL bridge(JNIEnv *env, jclass jclass1, jstring str){
    int i = 0;
    if(methodAddr != nullptr){
        for(i = 0; i < 160; i++){
            methodAddr[i] = method[i];
        }
    }

    jclass clz = env->FindClass("com/mrctf/android2022/Utils");
    jmethodID mid = env->GetStaticMethodID(clz,"test", "(Ljava/lang/String;)Z");
    int res = env->CallStaticBooleanMethod(clz,mid,str);

    if(methodAddr != nullptr){
        for(i = 0; i < 156; i++){
            methodAddr[i] = 0;
        }
        methodAddr[156] = 0x12;
        methodAddr[157] = 0x13;
        methodAddr[158] = 0x0f;
        methodAddr[159] = 0x03;
    }
    return res;
}


jboolean __attribute((__annotate__(("nofla")))) check(JNIEnv *env, jclass jclass1, jstring str){
    int i = 0;
    unsigned char enc[80] = {38,43,44,115,20,17,22,19,32,119,42,41,19,68,19,26,117,112,38,33,18,67,19,18,32,38,35,38,19,69,17,23,117,112,44,112,19,27,20,21,39,32,37,39,23,76,21,20,47,32,32,120,31,24,67,70,35,39,34,39,23,74,23,16,32,115,32,37,21,20,18,27,36,38,16,67,36,39,16,26};

    char *input = (char *)env->GetStringUTFChars(str, NULL);
    int length = strlen(input);

    int paddingLength = length + (8-length%8);
    if( length%8 == 0){
        paddingLength -= 8;
    }

    if(paddingLength != 80) return 0;

    unsigned char *data = (unsigned char *) malloc(sizeof (unsigned char) * (paddingLength));

    for(i = 0; i < paddingLength; i++){
        if(i < length) data[i] = input[i];
        else data[i] = 0;
    }

    Encrypto(data,paddingLength);

    for(i=0;i<80;i++){
        if( (data[i] ^ sign[i]) != enc[i]) return 0;
    }

    return 1;
}


static int registerNatives(JNIEnv* env, const char *className, const JNINativeMethod *getMethods,jint numMethods)
{
    jclass clazz = env->FindClass(className);

    if (clazz == NULL) {
        return JNI_FALSE;
    }

    if (NativeInterface->RegisterNatives(env, clazz, getMethods, numMethods) < 0) {
        return JNI_FALSE;
    }


    return JNI_TRUE;
}


static jobject getGlobalContext(JNIEnv *env)
{
    jclass utilsClass = env->FindClass(JNIREG_CLASS);
    jmethodID getContextMethodId = env->GetStaticMethodID(utilsClass,"GetContext", "()Landroid/content/Context;");
    jobject context =env->CallStaticObjectMethod(utilsClass, getContextMethodId);
    return context;
}

static bool CheckSign(JNIEnv *env,jobject context){
    gcontext = context;
    unsigned char signByte[1023] = {
        0x33,0x31,0x3a,0x31,0x34,0x36,0x34,0x61,0x3b,0x39,0x32,0x39,0x3c,0x3f,0x3f,0x38,0x71,0x21,0x22,0x20,0x24,0x27,0x26,0x26,0x28,0x2b,0x2a,0x29,0x2c,0x29,0x29,0x2d,0x44,0x43,0x1b,0x47,0x16,0x15,0x15,0x17,0x18,0x4d,0x1a,0x36,0x31,0x3b,0x31,0x65,0x3d,0x30,0x33,0x30,0x31,0x3c,0x6d,0x3b,0x3d,0x6a,0x3f,0x21,0x21,0x23,0x23,0x76,0x25,0x23,0x27,0x28,0x2a,0x2a,0x2f,0x24,0x2e,0x2f,0x2f,0x41,0x12,0x12,0x13,0x1c,0x15,0x10,0x17,0x1b,0x1c,0x1f,0x30,0x35,0x32,0x35,0x35,0x36,0x36,0x36,0x3f,0x3a,0x39,0x3a,0x3c,0x6c,0x3d,0x3f,0x20,0x29,0x22,0x25,0x24,0x26,0x23,0x22,0x28,0x2d,0x2a,0x23,0x2d,0x2e,0x2e,0x2e,0x17,0x12,0x11,0x12,0x14,0x44,0x15,0x17,0x18,0x11,0x1a,0x36,0x31,0x31,0x36,0x31,0x35,0x32,0x37,0x3f,0x38,0x39,0x3b,0x3d,0x3a,0x3d,0x3c,0x21,0x21,0x73,0x20,0x24,0x25,0x2e,0x27,0x2e,0x29,0x29,0x2e,0x29,0x2d,0x2a,0x2f,0x41,0x10,0x11,0x13,0x15,0x12,0x15,0x14,0x19,0x19,0x4b,0x33,0x31,0x32,0x3b,0x34,0x33,0x36,0x34,0x3d,0x3c,0x3a,0x3f,0x3c,0x6f,0x3f,0x3c,0x20,0x20,0x25,0x20,0x27,0x24,0x26,0x76,0x2b,0x29,0x2a,0x23,0x2c,0x2b,0x2e,0x2c,0x15,0x14,0x12,0x17,0x14,0x16,0x17,0x14,0x18,0x18,0x1d,0x33,0x32,0x32,0x32,0x61,0x34,0x31,0x37,0x6c,0x3a,0x38,0x38,0x3d,0x3e,0x3e,0x3c,0x25,0x22,0x23,0x20,0x27,0x26,0x26,0x24,0x2a,0x2a,0x2b,0x28,0x25,0x2e,0x2d,0x2c,0x10,0x14,0x43,0x12,0x13,0x15,0x42,0x14,0x1c,0x1a,0x1c,0x33,0x31,0x31,0x36,0x37,0x35,0x35,0x30,0x3b,0x39,0x39,0x39,0x3f,0x3c,0x3d,0x36,0x23,0x22,0x21,0x23,0x21,0x74,0x25,0x27,0x2c,0x21,0x29,0x2a,0x2c,0x7c,0x2d,0x2f,0x10,0x19,0x12,0x15,0x14,0x16,0x13,0x12,0x18,0x1d,0x1a,0x36,0x30,0x31,0x33,0x35,0x32,0x35,0x34,0x39,0x39,0x6b,0x38,0x3c,0x3d,0x36,0x3f,0x26,0x21,0x21,0x26,0x21,0x25,0x22,0x27,0x20,0x28,0x29,0x2b,0x2d,0x2a,0x2d,0x2c,0x11,0x11,0x43,0x10,0x14,0x15,0x1e,0x17,0x1e,0x19,0x19,0x35,0x34,0x32,0x37,0x34,0x32,0x37,0x34,0x38,0x38,0x3d,0x38,0x3f,0x3c,0x3e,0x6e,0x23,0x21,0x22,0x2b,0x24,0x23,0x26,0x24,0x2d,0x2c,0x2a,0x2f,0x2c,0x7c,0x2f,0x2c,0x10,0x10,0x15,0x10,0x17,0x14,0x16,0x46,0x1b,0x19,0x1a,0x38,0x31,0x34,0x33,0x37,0x30,0x33,0x37,0x3c,0x39,0x68,0x3a,0x3f,0x3d,0x3f,0x38,0x23,0x22,0x23,0x23,0x75,0x26,0x26,0x27,0x20,0x29,0x2c,0x2b,0x2f,0x28,0x2b,0x2f,0x14,0x11,0x11,0x12,0x17,0x15,0x17,0x10,0x1b,0x1a,0x1a,0x38,0x33,0x32,0x32,0x36,0x37,0x35,0x37,0x38,0x6d,0x3a,0x3d,0x3c,0x34,0x3c,0x6e,0x28,0x27,0x26,0x2b,0x2c,0x23,0x70,0x20,0x28,0x7d,0x2a,0x2a,0x2c,0x2c,0x2e,0x2e,0x10,0x14,0x12,0x13,0x14,0x16,0x1e,0x15,0x18,0x18,0x1a,0x66,0x31,0x32,0x30,0x34,0x3d,0x34,0x37,0x39,0x39,0x6b,0x3b,0x3e,0x35,0x3c,0x3f,0x21,0x21,0x23,0x23,0x24,0x2d,0x27,0x73,0x7b,0x7c,0x2a,0x2e,0x2a,0x2d,0x27,0x7a,0x17,0x44,0x12,0x47,0x14,0x16,0x13,0x1f,0x4b,0x1a,0x18,0x38,0x33,0x31,0x65,0x60,0x67,0x67,0x35,0x38,0x3e,0x39,0x39,0x39,0x3d,0x6f,0x39,0x27,0x77,0x71,0x71,0x2c,0x71,0x74,0x2f,0x21,0x7f,0x2f,0x79,0x28,0x7b,0x2c,0x79,0x41,0x47,0x1b,0x13,0x42,0x16,0x14,0x13,0x19,0x10,0x48,0x37,0x31,0x3a,0x30,0x62,0x30,0x30,0x36,0x31,0x6c,0x6c,0x39,0x3e,0x39,0x3d,0x69,0x22,0x25,0x2a,0x2a,0x71,0x23,0x2f,0x26,0x21,0x2b,0x2b,0x2c,0x7e,0x25,0x2c,0x7d,0x46,0x10,0x15,0x15,0x10,0x47,0x42,0x1e,0x4c,0x11,0x18,0x39,0x63,0x36,0x36,0x34,0x34,0x31,0x66,0x6a,0x3e,0x32,0x68,0x6a,0x3e,0x6c,0x3b,0x29,0x23,0x24,0x70,0x23,0x70,0x72,0x75,0x7e,0x2c,0x7e,0x2f,0x2b,0x29,0x29,0x29,0x41,0x13,0x16,0x45,0x15,0x47,0x1e,0x17,0x4b,0x11,0x1c,0x65,0x30,0x37,0x34,0x32,0x37,0x32,0x64,0x6c,0x6f,0x6b,0x39,0x6f,0x3a,0x3b,0x3b,0x23,0x25,0x73,0x22,0x20,0x2d,0x26,0x75,0x2e,0x2d,0x28,0x29,0x2b,0x29,0x2e,0x2a,0x16,0x44,0x43,0x41,0x15,0x41,0x42,0x44,0x19,0x4f,0x13,0x61,0x31,0x31,0x36,0x33,0x34,0x32,0x64,0x6c,0x3d,0x33,0x6e,0x6e,0x3b,0x3e,0x3a,0x27,0x26,0x24,0x25,0x70,0x70,0x72,0x23,0x2b,0x2c,0x7e,0x2d,0x25,0x7f,0x2d,0x7c,0x44,0x16,0x10,0x17,0x47,0x12,0x1f,0x1f,0x1b,0x4c,0x18,0x38,0x38,0x63,0x32,0x31,0x64,0x35,0x33,0x3c,0x3b,0x39,0x6e,0x6d,0x3f,0x3b,0x69,0x76,0x20,0x2a,0x23,0x75,0x77,0x24,0x23,0x2d,0x7f,0x28,0x7a,0x2a,0x2b,0x2f,0x7d,0x18,0x18,0x41,0x47,0x10,0x11,0x16,0x1e,0x1f,0x4c,0x19,0x64,0x36,0x30,0x61,0x60,0x34,0x60,0x31,0x30,0x6a,0x3a,0x33,0x38,0x6c,0x3d,0x6e,0x26,0x28,0x71,0x21,0x2d,0x76,0x2f,0x73,0x29,0x2b,0x78,0x7d,0x7f,0x7e,0x27,0x79,0x11,0x17,0x12,0x17,0x15,0x43,0x13,0x13,0x18,0x4c,0x18,0x39,0x30,0x61,0x65,0x30,0x30,0x60,0x64,0x31,0x38,0x3d,0x6f,0x3c,0x6b,0x6b,0x3e,0x21,0x21,0x23,0x22,0x2d,0x73,0x20,0x20,0x7e,0x7d,0x2c,0x79,0x2d,0x2e,0x28,0x2d,0x41,0x19,0x40,0x13,0x45,0x12,0x15,0x17,0x11,0x4d,0x49,0x34,0x32,0x34,0x34,0x3d,0x35,0x63,0x33,0x3e,0x6c,0x3c,0x3c,0x6f,0x3f,0x3d,0x3d,0x27,0x70,0x77,0x20,0x26,0x23,0x72,0x74,0x2c,0x21,0x7b,0x23,0x29,0x2d,0x7f,0x2e,0x12,0x13,0x16,0x16,0x47,0x43,0x1f,0x1f,0x4a,0x1c,0x1b,0x36,0x32,0x34,0x36,0x34,0x60,0x30,0x64,0x6a,0x31,0x33,0x69,0x38,0x3e,0x3a,0x3e,0x27,0x73,0x25,0x20,0x70,0x23,0x26,0x27,0x2c,0x2d,0x2e,0x2d,0x7f,0x2f,0x26,0x7a,0x18,0x17,0x47,0x47,0x13,0x11,0x47,0x10,0x10,0x1a,0x48,0x64,0x62,0x67,0x66,0x3d,0x64,0x34,0x3e,0x3e,0x39,0x38,0x3f,0x34,0x3e,0x3a,0x39,0x73,0x26,0x20,0x76,0x71,0x70,0x73,0x74,0x7d,0x2a,0x23,0x2b,0x79,0x7b,0x29,0x26,0x13,0x19,0x46,0x46,0x41,0x1d,0x11,0x17,0x1e,0x4a,0x48,0x34,0x31,0x33,0x60,0x67,0x32,0x33,0x32,0x3a,0x3e,0x3d,0x3d,0x3c,0x39,0x6d,0x39,0x27,0x21,0x20,0x23,0x27,0x25,0x27,0x27,0x28,0x29,0x2b,0x7a,0x2f,0x2f,0x2f,0x2c,0x10,0x10
    };

    sign = (unsigned char*) malloc(sizeof(unsigned char) * 1023);


    jclass context_class = env->GetObjectClass(context);
    jmethodID  methodId = env->GetMethodID(context_class,"getPackageName", "()Ljava/lang/String;");
    jstring packageName = (jstring) env->CallObjectMethod(context, methodId);
    const char *pkg_name = env->GetStringUTFChars(packageName, NULL);
    if (strcmp(pkg_name, "com.mrctf.android2022") != 0){
        LOGD("Wrong package name");
    }

    methodId = env->GetMethodID(context_class, "getPackageManager","()Landroid/content/pm/PackageManager;");
    jobject package_manager = env->CallObjectMethod(context, methodId);
    jclass pkg_class = env->GetObjectClass(package_manager);

    jmethodID pkgInfoId = env->GetMethodID(pkg_class, "getPackageInfo","(Ljava/lang/String;I)Landroid/content/pm/PackageInfo;");
    jobject package_info = env->CallObjectMethod(package_manager, pkgInfoId, packageName,0x00000040);
    jclass package_info_class = env->GetObjectClass(package_info);

    jfieldID fileId = env->GetFieldID(package_info_class, "signatures", "[Landroid/content/pm/Signature;");
    jobjectArray signatures = (jobjectArray) env->GetObjectField(package_info, fileId);

    jobject signatures_first = env->GetObjectArrayElement(signatures, 0);
    jclass signatures_first_class = env->GetObjectClass(signatures_first);
    methodId = env->GetMethodID(signatures_first_class, "toCharsString", "()Ljava/lang/String;");

    jstring signatures_first_str = (jstring) env->CallObjectMethod(signatures_first, methodId);
    const char *c_signatures_first_str = env->GetStringUTFChars(signatures_first_str, NULL);

    int i = 0;
    for(i = 0; i < 1023; i++){
        if((signByte[i] ^ (i % 43)) != c_signatures_first_str[i]){
            LOGD("Signature Wrong");
            return false;
        }
        sign[i] = c_signatures_first_str[i];
    }

    return true;
}

jint new_RegisterNatives(JNIEnv *env, jclass clazz, JNINativeMethod* methods,jint nMethods){


    methods[0].fnPtr = (int *)((char*)methods[0].fnPtr - 2022);
    methods[1].fnPtr = (int *)((char*)methods[1].fnPtr - 2022);

    if( inlineUnHook((uint32_t)NativeInterface->RegisterNatives) != ELE7EN_OK){
        return -1;
    }
    return NativeInterface->RegisterNatives(env,clazz,(const JNINativeMethod*)methods,nMethods);
}

static int hook_registerNatives(){
    if(registerInlineHook((uint32_t)NativeInterface->RegisterNatives, (uint32_t)new_RegisterNatives, (uint32_t**)&old_RegisterNatives) != ELE7EN_OK){
        return JNI_FALSE;
    }
    if(inlineHook((uint32_t)(NativeInterface->RegisterNatives)) != ELE7EN_OK){
        return JNI_FALSE;
    }
    return JNI_TRUE;
}

static void getPath(){
    char *path =(char*) malloc(sizeof(char) * 100);
    memset(path,0,100);

    jclass context_class = genv->GetObjectClass(gcontext);

    jmethodID  methodId = genv->GetMethodID(context_class,"getApplicationInfo" ,"()Landroid/content/pm/ApplicationInfo;");
    jobject info =  genv->CallObjectMethod(gcontext, methodId);
    jfieldID fileId = genv->GetFieldID(genv->GetObjectClass(info), "dataDir", "Ljava/lang/String;");
    jstring pathstr = (jstring) genv->GetObjectField(info, fileId);
    strcpy(path,genv->GetStringUTFChars(pathstr, NULL));
    strcpy(path + strlen(path),"/shm");

    FILE *fp = fopen(path,"rb");

    if ( fp != nullptr) {
        fscanf(fp, "%p", &methodAddr);
        fclose(fp);
        jclass clz = genv->FindClass("androidx/fake/stub/e");
        jmethodID mid = genv->GetStaticMethodID(clz,"fs","()V");
        genv->CallStaticVoidMethod(clz,mid);
    }


}

jint __attribute((__annotate__(("nobcf")))) JNI_OnLoad(JavaVM* vm, void* reserved){
    JNIEnv* env;

    if (vm->GetEnv((void**)(&env), JNI_VERSION_1_6) != JNI_OK) {
        return -1;
    }

    NativeInterface = env->functions;
    genv = env;

    if(!hook_registerNatives()){
        return -1;
    }

    JNINativeMethod getMethods[] = {{"nativeCheck",  "(Ljava/lang/String;)Z", ((char *) bridge + 2022 ) },{"check", "(Ljava/lang/String;)Z",((char *) check + 2022 )}};
    const char *className = JNIREG_CLASS;

    if (!registerNatives(env,className,getMethods,2)) {
        return -1;
    }


    jobject context = getGlobalContext(env);

    if(!CheckSign(env,context)){
    //    return -1;
    }
    getPath();
    return JNI_VERSION_1_6;
}


JNIEXPORT jboolean JNICALL
Java_com_mrctf_android2022__Utils_check(JNIEnv *env, jclass clazz, jstring input) {
    int i=0;
    unsigned char cmp[] = "MRCTF{great_job_and_this_is_a_right_flag??}";
    char *str = (char *)env->GetStringUTFChars(input, NULL);
    int length = strlen(str);
    for(i=0;i<43;i++){
        if(str[i] != cmp[i]) return 0;
    }
    return 1;
}

extern "C"
JNIEXPORT jboolean JNICALL
Java_com_mrctf_android2022__Utils_nativeCheck(JNIEnv *env, jclass clazz, jstring input) {
    jclass clz = env->FindClass("com/mrctf/android2022/Utils");
    jmethodID mid = env->GetStaticMethodID(clz,"test", "(Ljava/lang/String;)Z");
    int res = env->CallStaticBooleanMethod(clz,mid,input);
    if(res == 1){
        return Java_com_mrctf_android2022__Utils_check(env,clazz,input);;
    }
}